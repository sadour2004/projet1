// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums are not supported in SQLite, using String instead
// Role: OWNER, STAFF
// MovementType: SALE_OFFLINE, CANCEL_SALE, RETURN, LOSS, ADJUSTMENT

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  password    String    // Argon2id hash
  dateOfBirth String?   // Date of birth for password recovery (YYYY-MM-DD format)
  role        String    @default("STAFF")
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Inventory relations
  movements InventoryMovement[]
  auditLogs AuditLog[]

  @@index([email])
  @@index([role])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([slug])
}

model Product {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  sku          String?  @unique
  priceCents   Int
  currency     String   @default("MAD")
  isActive     Boolean  @default(true)
  isArchived   Boolean  @default(false)
  stockCached  Int      @default(0)
  categoryId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])
  images   ProductImage[]
  movements InventoryMovement[]

  @@index([slug])
  @@index([sku])
  @@index([name])
  @@index([isActive])
  @@index([isArchived])
  @@index([categoryId])
  @@index([stockCached])
  @@index([isActive, isArchived])
  @@index([isActive, stockCached])
  @@index([isActive, categoryId])
  @@index([stockCached, isActive])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  width     Int?
  height    Int?
  priority  Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([priority])
}

model ProductArchive {
  id           String   @id @default(cuid())
  originalId   String   // Original product ID before deletion
  name         String
  description  String?
  sku          String?
  priceCents   Int
  currency     String   @default("MAD")
  categoryId   String?
  isActive     Boolean  @default(false)
  stockCached  Int      @default(0)
  movementCount Int     @default(0) // Number of movements when archived
  archivedAt   DateTime @default(now())
  archivedBy   String   // User ID who archived the product

  @@index([originalId])
  @@index([archivedAt])
  @@index([archivedBy])
}

model InventoryMovement {
  id             String       @id @default(cuid())
  productId      String
  type           String
  qty            Int          // positive for +stock, negative for -stock
  unitPriceCents Int?         // snapshot price at time of movement
  note           String?
  actorId        String?
  createdAt      DateTime     @default(now())

  product Product @relation(fields: [productId], references: [id])
  actor   User?   @relation(fields: [actorId], references: [id])

  @@index([productId, createdAt])
  @@index([type])
  @@index([actorId])
  @@index([createdAt])
  @@index([type, createdAt])
  @@index([productId, type])
  @@index([createdAt, type])
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String?
  action   String
  entity   String
  entityId String?
  meta     String?
  createdAt DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@index([action])
}
